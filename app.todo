# Todo:
--------------------------------------------------------------------------------
1. Languages
2. Responsive layout
   - calendar view
   - notification messages
3. Themes update
4. Clear (redis) cache on model events.
5. Login button link on website
6. Update to PHP 8 when Laravel 9 is released
8. Security (secure tokens, secure csrf, xss etc. hacking!)
9. Deployment .env's, docker files
   - hide error message bodies (for security)
10. Rate limit how many times can login (brute force protection)
11. Make technical documentation of how everything works.
12. Min password length (javascript)
13. PHP if user / organization already exists
14. TESTS
15. Templates for (same client always 1 service, same time, price etc.)
16. Send email using SMTP server (Gmail / Mail.ru or whatever...)
17. Better datatable component
18. User roles & permissions
29. Add force-position to dropdown menu
20. Encrypt (crypto-js) local storage keys for production (extra layer of security)
    - leave unencrypted for dev for easier development
21. Refactoring (move page loaders to composition f-ns?)
22. Admin panel
    - see and manage all clients, their users, invoices, contacts etc.
    - be able to send messages and chat with clients (websockets)
    - be able to see what a client is doing (transfer screenshots somehow?)
    - password re-prompts & 2FA
    - See screen with html2canvas (screenshot via websockets)
23. User roles (root, admin, super admin, moderator, user, guest)
    - not one root user but multiple to be able to see access logs for each
24. Fix small height (sidebar background)
25. Settings tabs active sidebar settings (only first works)
26. Fix file names SettingsNavigation.vue /Navigation/Settings.vue
27. See who is online and who is active. Online WS ping, active on click last
    activity
28. Show some message at any time to any client
29. Cut off client if invoice not paid
30. Move chat from page to its own component







# Ideas:
--------------------------------------------------------------------------------






# Deployment:
--------------------------------------------------------------------------------

"> Make a new feature
 > Commit to git
 > Run deploy.sh on server
 
 > commit "My new feature"       - alias for "git add . && git commit -m"
 > ssh hostserver                - ssh key alias
 > deploy                        - alias for '../deploy.sh'
 "


1. Find a server / hosting.                                         ✅

2. Configure reverse proxy to point to the app's services.          ✅
   reverse  - - - - - > website   [localhost:6455]
    proxy   - - - - - > frontend  [localhost:47344]
            - - - - - > backend   [localhost:41166]

3. Use production .env files. (copy & replace script)               ✅
   client/.env ... VITE_SERVER_URL=http://app.myclients.org/api
   server/.env ... APP_CLIENT_URL, APP_URL, DB_...
   
4. Use production Docker files. (docker-compose.yaml)               ✅
   - If you already have them on your system, after git pull,
     you need to copy & replace your prod files. (.env & docker-compose)

5. Build static frontend assets (on prod server with prod .env)     ✅

6. php artisan migrate --seed                                       ✅

7. Put a CDN in front of the application.                           ✅

8. Change website Login link                                        ✅

9. Cloudflare supports only one level subdomain free TLS/SSL cert   ✅

10. Seed only once, after that only migrate (+ include seeding      ✅
    with migrations if neccessary)

11. Zero-downtime idea. First, only build the images and then       ✅
    dcd and dcu. So it will be very fast.